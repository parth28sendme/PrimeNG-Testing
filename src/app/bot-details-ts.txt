import {Component,ElementRef,inject, OnInit,Renderer2,} from '@angular/core';
import { Clipboard } from '@angular/cdk/clipboard';
import { SidebarModule } from 'primeng/sidebar';
import {
  Chart,
  registerables
} from 'chart.js';
import { CommonModule, formatDate } from '@angular/common';
import { DropdownModule } from 'primeng/dropdown';
import { CalendarModule } from 'primeng/calendar';
import { InputTextModule } from 'primeng/inputtext';
import { TableModule } from 'primeng/table';
import { DialogModule } from 'primeng/dialog';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
//import { BotDetectionService } from './bot-detection.service';
import { BotDetectionService } from '../../Bot-Stop/Bot-Detection/bot-detection.service';
import { catchError, finalize, takeUntil } from 'rxjs/operators';
import { Subject, throwError } from 'rxjs';
import { FormsModule } from '@angular/forms';
import { ChartModule } from 'primeng/chart';
import { ChartsComponent } from 'src/app/roles-master/shared/reports/Charts/Charts.component';
import { RolesIds } from 'src/app/core/enums/RolesIds';
import { MemberService } from 'src/app/core/services/member.data.service';
import { MultiSelectModule } from 'primeng/multiselect';
import { ActivatedRoute } from '@angular/router';
import { ExclusionService } from '../../Bot-Stop/Exclusion/Exclusion.service';
import { BotIdentificationService } from '../../Bot-Stop/Bot-Identification/Bot-Identification.service';
import { TooltipModule } from 'primeng/tooltip';
import { GetStartedService } from '../../Bot-Stop/Get-Started/Get-Started.service';


@Component({
  selector: 'app-bot-detection-details',
  standalone: true,
  imports: [
     FormsModule,
    CommonModule,
    InputTextModule,
    TableModule,
    CalendarModule,
    DialogModule,
    ToastModule,
    ChartModule,
    MultiSelectModule,
    SidebarModule,
    DropdownModule,
    TooltipModule,
  ],
  templateUrl: './bot-detection-details.component.html',
  styleUrl: './bot-detection-details.component.scss'
})
export class BotDetectionDetailsComponent {
 private destroy$ = new Subject<void>();
   private _service = inject(BotDetectionService);
  _NetworkGroupService = inject(ActivatedRoute);
  _messageService = inject(MessageService);
  _RoleType = inject(RolesIds);
  _MemberService = inject(MemberService);
  botIdentificationService = inject(BotIdentificationService);
  _UserVerifyService = inject(GetStartedService);
  currentDate: string;

  RoleId: number = this._MemberService.getRoleID();
  _BotDetectionChart: any;
  IsLoading: boolean = false;
  IsNoDataFound: boolean = false;
  _BotVisits: any;
  IsBotDetectionDetails: boolean = false;
  Datalist: any;
  DialogHeader: string;
  CopyBtnName: string = 'Copy';

  _SelectedDate: Date[] = [new Date(new Date().setDate(new Date().getDate() - 6)), new Date()];
  __TotalCounts: any;
  __ChartCounts: any;
  temp__ChartCounts: any;
  __FinalChartCounts: any;
  __BotVisitsData: any;
  __BotVisitsDataMain : any;
  __NetworkGroups: any;
  __Networks: any;
  _SelectedNetworkGroup: any;
  _SelectedNetwork
  percentages: any;

  Filters: any = {
    formattedDate: '',
    NetworkIds: []
  }

  // Pagination properties
  page: number = 1; // Current page
  itemsPerPage: number = 10; // Items per page
  totalPages: number = 0; // Total number of pages
  paginatedData: any[] = []; // Data for the current page

  constructor(
    private renderer: Renderer2,
    private el: ElementRef,
    private clipboard: Clipboard,
    private messageService: MessageService
  ) {
    Chart.register(...registerables);
    const today = new Date();
    this.currentDate = today.toISOString().split('T')[0];
  }

  ngOnInit() {
    this._SelectedDate = [new Date(new Date().setDate(new Date().getDate() - 6)), new Date()];
   this.Filters.fromDate = formatDate(this._SelectedDate[0], 'yyyy-MM-dd', 'en-US');
    this.Filters.toDate = this._SelectedDate[1] ? formatDate(this._SelectedDate[1], 'yyyy-MM-dd', 'en-US') : formatDate(new Date(), 'yyyy-MM-dd', 'en-US');
  
    this.GetNetworkGroups();
    this.GetAllPageData();
    this.IsLoading = true
     this.botsSettings = true;
  }


  onDateChange(event: any) {
    const selectedDate = event.target.value;
  }
  // Calculate the total number of pages
  calculateTotalPages() {
    this.totalPages = Math.ceil(this.__BotVisitsData?.length / this.itemsPerPage);
  }

  // Update paginated data based on the current page
  updatePaginatedData() {
    const startIndex = (this.page - 1) * this.itemsPerPage;
    const endIndex = startIndex + this.itemsPerPage;
    this.paginatedData = this.__BotVisitsData.slice(startIndex, endIndex);
    this.paginatedData = this.safeJSONParse(this.paginatedData);
  }

  // Navigate to a specific page
  goToPage(page: number) {
    if (page >= 1 && page <= this.totalPages) {
      this.page = page;
      this.updatePaginatedData();
    }
  }

  // Navigate to the next page
  nextPage() {
    if (this.page < this.totalPages) {
      this.page++;
      this.updatePaginatedData();
    }
  }

  // Navigate to the previous page
  previousPage() {
    if (this.page > 1) {
      this.page--;
      this.updatePaginatedData();
    }
  }

  ChangeNetworkGroup() {
    this.__Networks = this._SelectedNetworkGroup.networks;

    this.__Networks = [];
    this._SelectedNetwork = [];
    let selectednetworkGroups = [];

    this._SelectedNetworkGroup.forEach(x => {
      selectednetworkGroups.push(this.__NetworkGroups.find(element => element['value'] == x));
    });
    selectednetworkGroups.forEach(networkGroup => {
      let networks = networkGroup['networks'];
      networks.forEach(network => {
        this.__Networks.push(network);
      });
    });
  }

  currentSortColumn: string | null = null;
  currentSortOrder: 'asc' | 'desc' = 'asc';
  activeVisitId: string | null = null; // Tracks the open accordion

  sortColumn(column: keyof (typeof this.__BotVisitsData)[0]) {
    // Check if the same column is being sorted; toggle the sort order if true.
    if (this.currentSortColumn === column) {
      this.currentSortOrder = this.currentSortOrder === 'asc' ? 'desc' : 'asc';
    } else {
      this.currentSortColumn = column as string;
      this.currentSortOrder = 'asc';
    }

    // Perform the sort operation
    this.__BotVisitsData.sort((a, b) => {
      const valueA = a[column];
      const valueB = b[column];

      // Handle null/undefined values
      if (valueA == null && valueB != null)
        return this.currentSortOrder === 'asc' ? 1 : -1;
      if (valueB == null && valueA != null)
        return this.currentSortOrder === 'asc' ? -1 : 1;
      if (valueA == null && valueB == null) return 0;

      // Compare numbers
      if (typeof valueA === 'number' && typeof valueB === 'number') {
        return this.currentSortOrder === 'asc'
          ? valueA - valueB
          : valueB - valueA;
      }

      // Compare strings (case-insensitive)
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        return this.currentSortOrder === 'asc'
          ? valueA.localeCompare(valueB)
          : valueB.localeCompare(valueA);
      }

      // Fallback for other data types
      return 0;
    });
  }

  getSortIcon(column: string): string {
    if (this.currentSortColumn === column) {
      return this.currentSortOrder === 'asc'
        ? 'bi bi-caret-up-fill'
        : 'bi bi-caret-down-fill';
    }
    return '';
  }

  btnSearch_Click() {

     this.Filters.fromDate = formatDate(this._SelectedDate[0], 'yyyy-MM-dd', 'en-US');
       this.Filters.toDate = this._SelectedDate[1] ? formatDate(this._SelectedDate[1], 'yyyy-MM-dd', 'en-US') : formatDate(new Date(), 'yyyy-MM-dd', 'en-US');
    this.Filters.NetworkIds = this._SelectedNetwork ?? [];

    if (this.__Networks != undefined && this._SelectedNetworkGroup != undefined) {
      if (this.__Networks.length > 0
        && this._SelectedNetworkGroup.length > 0
        && this._SelectedNetwork == 0
      ) {
        this.Filters.NetworkIds = this.__Networks.map(x => x.value);
      }
    }

    this.GetAllPageData();
    this.GetIdentificationData();
  }

  btnReset_Click() {
    this._SelectedDate = [new Date()];
    this._SelectedNetwork = [];
    this._SelectedNetworkGroup = [];
    this.__Networks = [];
    // this.Filters.formattedDate = [new Date(new Date().setDate(new Date().getDate() - 6)), new Date()];
    // this.Filters.
    this.Filters.NetworkIds = [];
    this._SelectedDate = [new Date(new Date().setDate(new Date().getDate() - 6)), new Date()];
    this.Filters.fromDate = formatDate(this._SelectedDate[0], 'yyyy-MM-dd', 'en-US');
    this.Filters.toDate = this._SelectedDate[1] ? formatDate(this._SelectedDate[1], 'yyyy-MM-dd', 'en-US') : formatDate(new Date(), 'yyyy-MM-dd', 'en-US');
  
    this.GetAllPageData();
  } 
  GetNetworkGroups() {
    if (this.RoleId == this._RoleType.NetworksGroups){
      this._NetworkGroupService.data.subscribe((data: any) => {
        const networks = data?.networks || [];
        this.__NetworkGroups = networks;
      });
    }else
    {
      this._NetworkGroupService.data.subscribe(data => {
        this.__NetworkGroups = data.networkGroups;
      });
    }
  }

  GetAllPageData() {
    this.IsLoading = true;

    this._service.GetData2(this.Filters).pipe(finalize(() => this.IsLoading = false)
      , takeUntil(this.destroy$)
      , catchError((error) => {
        this.IsLoading = false; // Stop loading if there's an error
        // You can display an error message or handle it differently here
        this.IsNoDataFound = false; // Set flag if data is not found
        return throwError(() => new console.log("API Failed")
        ); // Re-throw the error
      })
    ).subscribe(result => {
      if (result.body) {

        const parsedBody = JSON.parse(result.body);
        console.log("parsing" ,parsedBody);

        if (result.IsDataNotFound || parsedBody?.data?.length == 0) {
          // this.IsNoDataFound = true;
          this.__TotalCounts = result.filteredResponse || [];
          this.temp__ChartCounts = result.filteredResponse || [];
          this.__FinalChartCounts = result.filteredResponse || [];
           console.log("charts: ", result.filteredResponse );
          this.__BotVisitsData = result.filteredResponse || [];
          this.__BotVisitsDataMain = this.__BotVisitsData;
          console.log("Bot visits",this.__BotVisitsData)
          this.percentages = result.filteredResponse || [];
        }
        else {
          this.IsLoading = true;
          this.IsNoDataFound = false;
          this.__TotalCounts = parsedBody.data['activityCount'] ?? null;
          this.seleactedHeadingValue = this.__TotalCounts.total;
          this.temp__ChartCounts = parsedBody.data['badRequestCounts'] ?? null;
          console.log("Charts :" , this.temp__ChartCounts);
          this.__BotVisitsData = parsedBody.data['bot_visits'] ?? null;
          this.__BotVisitsDataMain = this.__BotVisitsData;

           console.log("Bot visits",this.__BotVisitsData)
          this.percentages =
            this.__TotalCounts && this.__TotalCounts.total > 0
              ? {
                  Malicious: (
                    ((this.__TotalCounts?.Malicious || 0) /
                      (this.__TotalCounts?.total || 1)) *
                    100
                  ).toFixed(2),
                  Friendly: (
                    ((this.__TotalCounts?.Friendly || 0) /
                      (this.__TotalCounts?.total || 1)) *
                    100
                  ).toFixed(2),
                  Human: (
                    ((this.__TotalCounts?.Human || 0) /
                      (this.__TotalCounts?.total || 1)) *
                    100
                  ).toFixed(2),
                  total: (
                    ((this.__TotalCounts?.total || 0) /
                      (this.__TotalCounts?.total || 1)) *
                    100
                  ).toFixed(2),
                }
              : {};
          this.__ChartCounts = this.transformData(this.temp__ChartCounts);
          this.processApiResponseHoursWiseData();
        }
  }
}
);
  }

  processApiResponseHoursWiseData() {
    const apiData = this.__ChartCounts;
    const styledDatasets = apiData.datasets.map(ds => ({
  ...ds,
  pointRadius: 0,         // hides the dots
  pointHoverRadius: 6,    // allows tooltips on hover
  pointHitRadius: 10  ,
  borderWidth: 1    // makes the hover area larger
}));

    
    this.IsLoading = true
    
    if (!apiData || !apiData.labels || !apiData.datasets) {
      console.error("Invalid API data format.");
      this.IsLoading = false;
      return;
  }

    this.__FinalChartCounts = {
      id: 1,
      type: 'line',
      data: {
        labels: apiData.labels,
        datasets: styledDatasets,
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'top',
            display: false,
            labels: { font: { size: 10 } }
          },
          tooltip: {
            titleFont: { size: 10 },
            bodyFont: { size: 10 },
            footerFont: { size: 10 }
          }
        },
        scales: {
          x: {
            ticks: { font: { size: 8 } },
             grid: {
              display: false // ✅ This removes the horizontal lines (Y-axis grid)
            }
          },
          y: {
            ticks: { font: { size: 8 } }
          }
        }
      }
    };
    this.IsLoading = false
  }

transformData(data: [string, string, number][]) {
  // Extract unique labels (hours)
  const labels = [...new Set(data.map((entry) => entry[0]))];

  // Extract unique bot types
  const botTypes = [...new Set(data.map((entry) => entry[1]))];

  // Map datasets for each bot type
  const datasets = botTypes.map((botType) => {
    const botData = labels.map((hour) => {
      const record = data.find(
        (entry) => entry[0] === hour && entry[1] === botType
      );
      return record ? record[2] : 0; // Default to 0 if no record exists
    });

    return {
      label: botType,
      data: botData,
      borderColor: this.getColor(botType),
      backgroundColor: this.getColor(botType), //this.transparentize(this.getColor(botType), 0.5)
    };
  });

  // // ➕ Add All Bots (total per hour)
  // const allBotsData = labels.map((hour) => {
  //   return botTypes.reduce((sum, botType) => {
  //     const record = data.find(
  //       (entry) => entry[0] === hour && entry[1] === botType
  //     );
  //     return sum + (record ? record[2] : 0);
  //   }, 0);
  // });

  // datasets.push({
  //   label: 'All Bots',
  //   data: allBotsData,
  //   borderColor: this.getColor('All Bots'),
  //   backgroundColor: this.getColor('All Bots'),
  // });

  return { labels, datasets };
}


  getColor(botType: string): string {
    switch (botType) {
    case 'Malicious':
      return this.selectedId == 1 || this.selectedId == 4 ? '#FA6400' : '#FCD9C1'; // dull orange
    case 'Friendly':
      return this.selectedId == 2 || this.selectedId == 4 ? '#28C76F' : '#CFF3DF'; // dull green
    case 'Human':
      return this.selectedId == 3 || this.selectedId == 4 ? '#A855F7' : '#EBD7FB'; // dull purple
    case 'All Bots':
      return this.selectedId == 4 ? '#2F80ED' : '#BFD9FB'; // dull blue
    default:
      return 'lightgray'; 
    }
  }

  copyToClipboard(visit: any): void {

        navigator.clipboard.writeText(this.formattedJson).then(() => {
          console.log('✅ Copied!');
        });
        this.CopyBtnName = 'Copied!';
        this._messageService.add({
          severity: 'success',
          summary: 'Success',
          detail: 'Response copied to clipboard!',
        });
    // const visitText = JSON.stringify(visit, null, 2);
    // navigator.clipboard
    //   .writeText(visitText)
    //   .then(() => {
    //     this.CopyBtnName = 'Copied!';
    //     this._messageService.add({
    //       severity: 'success',
    //       summary: 'Success',
    //       detail: 'Response copied to clipboard!',
    //     });
    //   })
    //   .catch((err) => {
    //     this._messageService.add({
    //       severity: 'error',
    //       summary: 'Error',
    //       detail: 'Failed to copy response to clipboard!',
    //     });
    //   });
  }

  transparentize(color: string, opacity: number): string {
    return `rgba(${this.hexToRgb(color)}, ${opacity})`;
  }

  hexToRgb(hex: string): string {
    const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, (_, r, g, b) => r + r + g + g + b + b);
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
      ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(
          result[3],
          16
        )}`
      : '0, 0, 0';
  }

  toggleAccordion(visit: any, event: MouseEvent) {
    event.stopPropagation(); // Prevent the click from triggering row selection
    if (this.activeVisitId === visit.requestId) {
      this.activeVisitId = null; // Close the accordion if it's already open
    } else {
      this.activeVisitId = visit.requestId; // Open the accordion for this visit
    }
  }

  isAccordionOpen(visit: any): boolean {
    this.CopyBtnName = 'Copy';
    return this.activeVisitId === visit.requestId;

  }

  ViewDetails(data: any) {
    this.Datalist = data;
    this.DialogHeader = data.bot;
    this.IsBotDetectionDetails = true;
    this.showScroll = false;
  }

  safeJSONParse(value: any): any {
    if (typeof value !== 'string') return value; // Return if already an object
    try {
      const parsed = JSON.parse(value);
      return typeof parsed === 'object' ? this.safeJSONParse(parsed) : parsed;
    } catch {
      return value; // Return original value if parsing fails
    }
  }

  get formattedJson(): string {
    return JSON.stringify(this.Datalist, null, 2); // Format JSON with indentation
  }
  legendData = [
  { label: 'Malicious', count: 200, percent: 20, color: '#F44336' }, // red
  { label: 'Friendly', count: 100, percent: 10, color: '#4CAF50' },  // green
  { label: 'Human', count: 1000, percent: 70, color: '#9C27B0' }     // purple
];

chartData = {
  labels: ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11'],
  datasets: [
    {
      label: 'Malicious',
      data: [15, 20, 18, 25, 30, 28, 22, 26, 30, 24, 20, 18],
      fill: false,
      borderColor: '#F44336',
      tension: 0.4
    },
    {
      label: 'Friendly',
      data: [10, 12, 14, 13, 12, 15, 14, 13, 12, 10, 11, 12],
      fill: false,
      borderColor: '#4CAF50',
      tension: 0.4
    },
    {
      label: 'Human',
      data: [100, 120, 150, 160, 140, 180, 170, 175, 190, 200, 210, 180],
      fill: false,
      borderColor: '#9C27B0',
      tension: 0.4
    }
  ]
};

chartOptions = {
  responsive: true,
  plugins: {
    legend: {
      display: false
    }
  },
  scales: {
    y: {
      beginAtZero: true
    }
  }
};

//#region BotDetection New UI


selectedBorder : any = "solid 1px #2F80ED"
selectedColour : any = "#2F80ED";
selectedBackgroudColour : any ="#F5F9FF";
selectedBorderColour : any = "#2F80ED";
selectedId : any = 4;
selectedHeading : any = "All Bots"
selectedTable : any = "Activity"
selectedTutorial : boolean = false
selectedInsights : boolean = true;
showScroll: boolean = false;
seleactedHeadingValue : any = 0 ;
selectedHeadingValuePercent : any = 100 ;
savedAmount : any = 25260;



ColourTheme(ID: number) {
  this.selectedId = ID;
  console.log("BotVisitsData",this.__BotVisitsData);
  console.log("BotsMain" , this.__BotVisitsDataMain);
  this.__BotVisitsData = this.__BotVisitsDataMain;

  switch (ID) {
    case 1:
      this.selectedBorder = "solid 1px #FA6400";
      this.selectedColour = "#FA6400";
      this.selectedBackgroudColour = "#FFF4ED";
      this.selectedBorderColour = "#FA6400";
      this.selectedHeading = "Malicious";
      this.__BotVisitsData = this.__BotVisitsData.filter((accounts)=> accounts.botcategory == "Malicious");
      this.seleactedHeadingValue =  this.__TotalCounts.Malicious;
      this.selectedHeadingValuePercent = (this.__TotalCounts.Malicious/this.__TotalCounts.total)*100 
      break;

    case 2:
      this.selectedBorder = "solid 1px #28C76F";
      this.selectedColour = "#28C76F";
      this.selectedBackgroudColour = "#F2FBF5";
      this.selectedBorderColour = "#28C76F";
      this.selectedHeading = "Friendly";
      this.__BotVisitsData = this.__BotVisitsData.filter((accounts)=> accounts.botcategory == "Friendly");
      this.seleactedHeadingValue =  this.__TotalCounts.Friendly;
      this.selectedHeadingValuePercent = (this.__TotalCounts.Friendly/this.__TotalCounts.total)*100 
      break;

    case 3:
      this.selectedBorder = "solid 1px #A855F7";
      this.selectedColour = "#A855F7";
      this.selectedBackgroudColour = "#FAF5FF";
      this.selectedBorderColour = "#A855F7";
      this.selectedHeading = "Human";
      this.__BotVisitsData = this.__BotVisitsData.filter((accounts)=> accounts.botcategory == "Human");
      this.seleactedHeadingValue =  this.__TotalCounts.Human;
      this.selectedHeadingValuePercent = (this.__TotalCounts.Human/this.__TotalCounts.total)*100 
      break;

    case 4:
      this.selectedBorder = "solid 1px #2F80ED";
      this.selectedColour = "#2F80ED";
      this.selectedBackgroudColour = "#F5F9FF";
      this.selectedBorderColour = "#2F80ED";
      this.selectedHeading = "All Bots";
      this.seleactedHeadingValue =  this.__TotalCounts.total;
      this.selectedHeadingValuePercent = (this.__TotalCounts.total/this.__TotalCounts.total)*100 
      break;

    default:
      console.log('ℹ Unknown status');
  }

  // ✅ REBUILD the datasets with updated color and emphasis
  const updatedDatasets = this.__ChartCounts.datasets.map((ds: any) => {
    const isSelected = (
      (ID === 1 && ds.label === 'Malicious') ||
      (ID === 2 && ds.label === 'Friendly') ||
      (ID === 3 && ds.label === 'Human') ||
      (ID === 4 && ds.label === 'All Bots')
    );

    return {
      ...ds,
      borderColor: this.getColor(ds.label),
      backgroundColor: this.getColor(ds.label),
      borderWidth: isSelected ? 1 : 1,
      pointRadius:  0,
      pointHoverRadius: 6,    // allows tooltips on hover
      pointHitRadius: 10
    };
  });

  // ✅ Reassign chart config with updated datasets
  this.__FinalChartCounts = {
    ...this.__FinalChartCounts,
    data: {
      ...this.__FinalChartCounts.data,
      datasets: updatedDatasets
    }
  };
}



tableChange(value : any){
  this.selectedTable =  value;
  console.log(this.Filters);
  const Payload={
    NetworkIds :'',
    fromDate : '2025-05-07',
    toDate : '2025-05-13',
  }
 
  this.GetExclusivesData()
}

TutorialChange(value : any){
  console.log("done");
 this.selectedTutorial = value == 1 ? true : false;
}



InsightsChange(value : any){
this.selectedInsights =  value == 1 ? true : false;

if(!this.selectedInsights){
  this.GetIdentificationData();
  console.log(this.IdentificationBotVisitsData)
}

}


toggleScroll(): void {
  this.showScroll = !this.showScroll;
}

getStatusStyle(result: string): any {
  switch (result) {
    case 'bad':        // Rejected
      return { color: '#FF4D4F', backgroundColor: '#FFF1F0' };
    case 'good':       // Approved
      return { color: '#28C76F', backgroundColor: '#F2FBF5' };
    case 'notDetected': // In Review
      return { color: '#A855F7', backgroundColor: '#F5F0FF' };
    default:
      return { color: '#6C757D', backgroundColor: '#F8F9FA' }; // N/A / Unknown
  }
}
  //#endregion

  //#region Setup botstop
  botsSettingsLevel : any = 1;
  botsSettings : boolean = false
  _BotSelectedAgency: any;
  _BotDomainList : any;
  _BotSelectedDomain : any;
  GUIId : any;
  skiptutorial : boolean =  true
  IsVerified : boolean;
  VerifyBtnName: string = 'Verify'
  IsVerifyBtnEnable: boolean = false;
  setupIsLoading : boolean = false;
  Verifiedbody: any;
  responseMessage: string | null = null;
  botstopConfirmation : boolean = false;
  verified : boolean ;

 username: string = '';
 codeSnippet: string = `
  <script>
      const script = document.createElement('script');
      script.src = "https://js.mobibox.ai/m.js"; 
      script.async = true;
      script.onload = function() {
          window.ma.init(${this.username});
      };
      document.head.appendChild(script);
  </script>`; // Code snippet displayed in the component


BotsSettingChange(value : any){
this.botsSettings = value === 1 ? true : false;
this.botsSettingsLevel = 1 
}

BotsSettingChangeLevel(value){
  if(value== 0){ //Closes Box
    this.botsSettings = false;
    this.skiptutorial = false; 
  }
  if(value==1 || value==2){ //Second Page
   this.botsSettingsLevel = value;
  }
  if(value==3){  //Third Page
   console.log("Hiii",this._BotSelectedDomain);
  this.GetGUIId(value);
  }
  if(value ==4){  //Verify Button
  this.onVerifyUser()
  this._BotSelectedAgency = null;
  this._BotDomainList = null;
  this._BotSelectedDomain =null;
  this.botsSettingsLevel = value 
  this.skiptutorial = false; 
  }
  
// this.botsSettingsLevel1 = false;  
// this.botsSettingsLevel2 = true
}

 GetGUIId(value) {

    this.setupIsLoading = true; // Start loading
    console.log(this._BotSelectedDomain);
    if(this.RoleId != this._RoleType.Networks){
    if(this._BotSelectedDomain== null || this._BotSelectedDomain == undefined){
        this._messageService.add({
        severity: 'warn',
        summary: 'Warning',
        detail: `Please select network groups and a network`, 
      });
      this.setupIsLoading = false;
      return
    }
    }
    let filterData = {
      NetworkId: this._BotSelectedDomain
    };

    this._UserVerifyService
      .GetGUIId(filterData as any)
      .pipe(
        finalize(() => (this.setupIsLoading = false)),
        takeUntil(this.destroy$),
        catchError((error) => {
          this.setupIsLoading = false; // Stop loading if there's an error
          // You can display an error message or handle it differently here
          return throwError(() => new console.log('API Failed')); // Re-throw the error
        })
      )
      .subscribe((x) => {
      
       const parsedBody = JSON.parse(x.body);
       console.log("x", parsedBody);
        if (parsedBody.data.GUId) {
          this.GUIId = parsedBody.data.GUId;
          this.IsVerified = parsedBody.data.IsVerified;

       

          if (this.GUIId) {
            this.IsVerifyBtnEnable = true;
          }

        this.codeSnippet = `
    <script>
      const script = document.createElement('script');
      script.src = "https://js.mobibox.ai/m.js"; 
      script.async = true;
      script.onload = function() {
          window.ma.init("${this.GUIId}");
      };
      document.head.appendChild(script);
    </script>`;
      }
      this.botsSettingsLevel = value
    })

    
  }

   onVerifyUser() {
    this.setupIsLoading = true;
    if (!this.GUIId) {
      this._messageService.add({
        severity: 'warn',
        summary: 'Warning',
        detail: `Please select network groups and a network to integrate JavaScript.`,
      });
      this.setupIsLoading = false;
      return;
    }

    this.Verifiedbody = {
      id: this.GUIId,
      Script: this.codeSnippet,
    };

    // this._UserVerifyService.verifyUser(this.Verifiedbody).subscribe({
    //   next: (response) => {
       
    //     const parsedBody = JSON.parse(response.body);  
    //     console.log('parsedBody:', parsedBody)   
    //     this.responseMessage = parsedBody.message;
    //     this.IsVerified = parsedBody.IsVerified;
    //     if (this.IsVerified) {
    //       this._messageService.add({
    //         severity: 'success',
    //         summary: 'Success',
    //         detail: `${this.responseMessage}`,
    //       });
    //     } else {
    //       this._messageService.add({
    //         severity: 'warn',
    //         summary: 'Warning',
    //         detail: `${this.responseMessage}`,
    //       });
    //     }
    //   },
    //   error: (error) => {
    //     this.responseMessage = 'An error occurred: ' + error.message;
    //   },
    // });
    this._UserVerifyService.verifyUser(this.Verifiedbody).subscribe({
      next: (response) => {
        const parsedBody = typeof response.body === 'string' ? JSON.parse(response.body) : response.body;
        console.log('parsedBody:', parsedBody);
    
        this.responseMessage = parsedBody.message;
        const isSuccess = parsedBody.success === true;
    
        this.verified = isSuccess;
        // this._messageService.add({
        //   severity: isSuccess ? 'success' : 'warn',
        //   summary: isSuccess ? 'Success' : 'Warning',
        //   detail: this.responseMessage,
        // });
        this.setupIsLoading = false;
      },
      error: (err) => {
        console.error('Verification Error:', err);
        this.verified = false;
        // this._messageService.add({
        //   severity: 'error',
        //   summary: 'Error',
        //   detail: 'Verification failed. Please try again later.',
        // });
        this.setupIsLoading = false;
      }     
    });
    this.botsSettings = false
    this.botstopConfirmation = true;
  }


// ChangeAgencyGroup() {
//     this._BotDomainList = this._BotSelectedAgency.networks;

//     this._BotDomainList = [];
//     this._SelectedNetwork = [];
//     let selectednetworkGroups = [];

//     this._BotSelectedAgency.forEach(x => {
//       selectednetworkGroups.push(this.__NetworkGroups.find(element => element['value'] == x));
//     });
//     selectednetworkGroups.forEach(networkGroup => {
//       let networks = networkGroup['networks'];
//       networks.forEach(network => {
//         this._BotDomainList.push(network);
//       });
//     });

//     console.log("List : " , this._BotDomainList);
//   }
ChangeAgencyGroup() {
  this._BotDomainList = [];
  this._SelectedNetwork = [];

  const selectedAgency = this.__NetworkGroups.find(
    (element) => element.value === this._BotSelectedAgency
  );

  if (selectedAgency && selectedAgency.networks) {
    this._BotDomainList = [...selectedAgency.networks];
  }

  console.log("List: ", this._BotDomainList);
}


  //#endregion
 

//#region Exclusives
 IsDataAvailable : any
 ExclusionService = inject(ExclusionService);
 _GoogleList : any[]
 _FacebookList : any[]
 ExclusiveLoading : boolean = false
 selectedPlatform: string = 'google';
 ExclusiveFilterDisplay : boolean = false;


  GetExclusivesData() {
    console.log("Filters before API call:", this.Filters);

    this.ExclusiveLoading = true;
    this.IsDataAvailable = true;
    


    this.ExclusionService.GetData(this.Filters)
      .pipe(finalize(() => this.ExclusiveLoading = false)
        , takeUntil(this.destroy$)
        , catchError((error) => {
          this.IsLoading = false;
          this.IsDataAvailable = false;
          this._GoogleList = [];  // Set empty array on error
          this._FacebookList = [];
          return throwError(() => new console.log("API Failed")
          );
        })
      ).subscribe((data: any) => {
        // console.log("API Response 1:", data);
          const parsedBody = JSON.parse(data.body);
          console.log("data",parsedBody);
        if (!parsedBody.data?.Google?.length || !parsedBody.data?.Facebook?.length) {
          this.IsDataAvailable = false;
          console.log("false");
          this._GoogleList = parsedBody.data.filteredResponse || [];
          this._FacebookList = parsedBody.data.filteredResponse || [];
        }
        else {
          console.log("true");
          this.IsDataAvailable = true;
          this._GoogleList = parsedBody.data.Google.length > 0 ? parsedBody.data.Google.sort((a: any, b: any) => b.Total - a.Total) : parsedBody.data.Google;
          this._FacebookList = parsedBody.data.Facebook.sort((a: any, b: any) => b.Traffic - a.Traffic);

          this._FacebookList = this._FacebookList.map((item: any) => {
            return { ...item, Fbad_id: Number(item.Fbad_id) };
          });
          
      console.log("google: " , this._GoogleList);
      console.log("meta :", this._FacebookList);
        }
      });

      
  }

  selectPlatform(platform: string) {
    this.selectedPlatform = platform;    
  }

  FilterDisplay(){
    this.ExclusiveFilterDisplay = true;
  }

  





  //#endregion


  //#region Bot Identificaiton


  IdentificationLoading : boolean =false;
  IdentificationBotVisitsData : any[];
  totalRecords : any;
  IdentificationDisplay : boolean = false;

  GetIdentificationData() {
    this.IdentificationLoading = true;

    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000); // 24 hours ago

    this.Filters.fromDate = formatDate(oneDayAgo, 'yyyy-MM-dd HH:mm:ss', 'en-US');
    this.Filters.toDate = formatDate(now, 'yyyy-MM-dd HH:mm:ss', 'en-US');

    this.botIdentificationService
      .GetData(this.Filters)
      .pipe(
        finalize(() => (this.IdentificationLoading = false)),
        takeUntil(this.destroy$),
        catchError((error) => {
          this.IdentificationLoading = false; // Stop loading if there's an error
          // You can display an error message or handle it differently here
          return throwError(() => new console.log('API Failed')); // Re-throw the error
        })
      )
      .subscribe((data: any) => {
        const parsedData =  JSON.parse(data.body);
        console.log("Indentification : " , parsedData);

        this.totalRecords = parsedData.data.count;
        if (this.totalRecords == 0 || parsedData.data?.length == 0) {
          this.IdentificationBotVisitsData = parsedData.data.filteredResponse || [];
        } else {
          // this.IdentificationLoading = true;
          this.totalPages = this.totalRecords;
          this.IdentificationBotVisitsData = parsedData.data.filteredResponse || [];

          this.IdentificationBotVisitsData = parsedData.data.filteredResponse.map((visit: any) => ({
            ...visit,
            tag: this.safeJSONParse(visit.tag),
            tampering: this.safeJSONParse(visit.tampering),
            vpninfo: this.safeJSONParse(visit.vpninfo),
            ipInfo: this.safeJSONParse(visit.ipInfo),
            confidence: this.safeJSONParse(visit.confidence),
            botinfo: this.safeJSONParse(visit.botinfo),
          }));
        }
      });
  }

  viewIdentification(data : any){
      this.Datalist = data;
    this.DialogHeader = data.bot;
    this.IdentificationDisplay = true
    this.showScroll = false;
  }
  
  copyToClipboardGuid(): void {
    navigator.clipboard.writeText(this.codeSnippet).then(() => {
      this.CopyBtnName = 'Copied!';
      this._messageService.add({
        severity: 'success',
        summary: 'Success',
        detail: 'Script copied to clipboard!',
      });
    });
  }
  
    //#endregion
}
